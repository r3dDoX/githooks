#!/bin/bash

# This way you can customize which branches should be skipped when
# prepending commit message.
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master develop test hotfix)
fi

BRANCH_NAME=$(git symbolic-ref --short HEAD)

# remove first part of branch in form of feature/1234-some-feature-name
BRANCH_NAME="${BRANCH_NAME##*/}"
# extract feature number from 1234-some-feature-name
FEATURE_NUMBER=$(echo $BRANCH_NAME | sed -n 's/\([0-9]*\)\-.*/\1/p')

BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")
BRANCH_IN_COMMIT=$(grep -c "\[$BRANCH_NAME\]" $1)

prefix=CLOUDAC-$FEATURE_NUMBER:

if [ -n "$BRANCH_NAME" ] && ! [[ $BRANCH_EXCLUDED -eq 1 ]] && ! [[ $BRANCH_IN_COMMIT -ge 1 ]] && ! [[ $2 = merge  ]] && ! [[ `cat $1` == $prefix* ]]; then
  sed -i.bak -e "1s/^/$prefix /" $1
fi
